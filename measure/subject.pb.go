// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: subject.proto

package measure

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Subject int32

const (
	Subject_host                   Subject = 0
	Subject_network                Subject = 1
	Subject_traffic                Subject = 2
	Subject_cpu                    Subject = 3
	Subject_memory                 Subject = 4
	Subject_os                     Subject = 5
	Subject_network_health         Subject = 6
	Subject_disservice             Subject = 7
	Subject_mockets                Subject = 8
	Subject_link_description       Subject = 9
	Subject_netviewer_request      Subject = 10
	Subject_geolocation            Subject = 11
	Subject_battery                Subject = 12
	Subject_group                  Subject = 13
	Subject_group_connection       Subject = 14
	Subject_group_member           Subject = 15
	Subject_process                Subject = 16
	Subject_member_sensor          Subject = 17
	Subject_topology_node          Subject = 18
	Subject_topology_edge          Subject = 19
	Subject_federation_log         Subject = 20
	Subject_netproxy_process       Subject = 21
	Subject_netproxy_addr_mapping  Subject = 22
	Subject_netproxy_proto_mapping Subject = 23
	Subject_netproxy_link_desc     Subject = 24
	Subject_netproxy_link_traffic  Subject = 25
	Subject_network_interface      Subject = 26
	Subject_rtt                    Subject = 27
	Subject_packet_loss            Subject = 28
	Subject_dspro_log              Subject = 29
	Subject_dspro_conf             Subject = 30
	Subject_dspro_matches          Subject = 31
	Subject_dspro_publications     Subject = 32
	Subject_data_tracking          Subject = 33
	Subject_iw                     Subject = 34
	Subject_video_stream           Subject = 35
	Subject_tcp_retransmission     Subject = 36
	Subject_msa_sensors            Subject = 37
	Subject_iobt_sensors           Subject = 38
	Subject_event                  Subject = 39
	Subject_bandwidth              Subject = 40
	Subject_group_configuration    Subject = 41
)

// Enum value maps for Subject.
var (
	Subject_name = map[int32]string{
		0:  "host",
		1:  "network",
		2:  "traffic",
		3:  "cpu",
		4:  "memory",
		5:  "os",
		6:  "network_health",
		7:  "disservice",
		8:  "mockets",
		9:  "link_description",
		10: "netviewer_request",
		11: "geolocation",
		12: "battery",
		13: "group",
		14: "group_connection",
		15: "group_member",
		16: "process",
		17: "member_sensor",
		18: "topology_node",
		19: "topology_edge",
		20: "federation_log",
		21: "netproxy_process",
		22: "netproxy_addr_mapping",
		23: "netproxy_proto_mapping",
		24: "netproxy_link_desc",
		25: "netproxy_link_traffic",
		26: "network_interface",
		27: "rtt",
		28: "packet_loss",
		29: "dspro_log",
		30: "dspro_conf",
		31: "dspro_matches",
		32: "dspro_publications",
		33: "data_tracking",
		34: "iw",
		35: "video_stream",
		36: "tcp_retransmission",
		37: "msa_sensors",
		38: "iobt_sensors",
		39: "event",
		40: "bandwidth",
		41: "group_configuration",
	}
	Subject_value = map[string]int32{
		"host":                   0,
		"network":                1,
		"traffic":                2,
		"cpu":                    3,
		"memory":                 4,
		"os":                     5,
		"network_health":         6,
		"disservice":             7,
		"mockets":                8,
		"link_description":       9,
		"netviewer_request":      10,
		"geolocation":            11,
		"battery":                12,
		"group":                  13,
		"group_connection":       14,
		"group_member":           15,
		"process":                16,
		"member_sensor":          17,
		"topology_node":          18,
		"topology_edge":          19,
		"federation_log":         20,
		"netproxy_process":       21,
		"netproxy_addr_mapping":  22,
		"netproxy_proto_mapping": 23,
		"netproxy_link_desc":     24,
		"netproxy_link_traffic":  25,
		"network_interface":      26,
		"rtt":                    27,
		"packet_loss":            28,
		"dspro_log":              29,
		"dspro_conf":             30,
		"dspro_matches":          31,
		"dspro_publications":     32,
		"data_tracking":          33,
		"iw":                     34,
		"video_stream":           35,
		"tcp_retransmission":     36,
		"msa_sensors":            37,
		"iobt_sensors":           38,
		"event":                  39,
		"bandwidth":              40,
		"group_configuration":    41,
	}
)

func (x Subject) Enum() *Subject {
	p := new(Subject)
	*p = x
	return p
}

func (x Subject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subject) Descriptor() protoreflect.EnumDescriptor {
	return file_subject_proto_enumTypes[0].Descriptor()
}

func (Subject) Type() protoreflect.EnumType {
	return &file_subject_proto_enumTypes[0]
}

func (x Subject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subject.Descriptor instead.
func (Subject) EnumDescriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{0}
}

var File_subject_proto protoreflect.FileDescriptor

var file_subject_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1c, 0x75, 0x73, 0x2e, 0x69, 0x68, 0x6d, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x69, 0x2e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2a, 0xe9, 0x05,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x6f, 0x73, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x6d, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x0d, 0x12, 0x14, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x10, 0x13, 0x12,
	0x12, 0x0a, 0x0e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x17,
	0x12, 0x16, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x74,
	0x74, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x73, 0x70, 0x72, 0x6f, 0x5f, 0x6c, 0x6f,
	0x67, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x73, 0x70, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x73, 0x70, 0x72, 0x6f, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x64, 0x73, 0x70, 0x72, 0x6f, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x20, 0x12, 0x11,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10,
	0x21, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x77, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x23, 0x12, 0x16, 0x0a, 0x12, 0x74,
	0x63, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x73, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x10, 0x25, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x6f, 0x62, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x10, 0x26, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x27, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x10, 0x28,
	0x12, 0x17, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x29, 0x42, 0x2c, 0x42, 0x0c, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x17, 0x69, 0x68, 0x6d,
	0x63, 0x2e, 0x75, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0xa0, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subject_proto_rawDescOnce sync.Once
	file_subject_proto_rawDescData = file_subject_proto_rawDesc
)

func file_subject_proto_rawDescGZIP() []byte {
	file_subject_proto_rawDescOnce.Do(func() {
		file_subject_proto_rawDescData = protoimpl.X.CompressGZIP(file_subject_proto_rawDescData)
	})
	return file_subject_proto_rawDescData
}

var file_subject_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_subject_proto_goTypes = []interface{}{
	(Subject)(0), // 0: us.ihmc.proto.sensei.measure.Subject
}
var file_subject_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_subject_proto_init() }
func file_subject_proto_init() {
	if File_subject_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subject_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subject_proto_goTypes,
		DependencyIndexes: file_subject_proto_depIdxs,
		EnumInfos:         file_subject_proto_enumTypes,
	}.Build()
	File_subject_proto = out.File
	file_subject_proto_rawDesc = nil
	file_subject_proto_goTypes = nil
	file_subject_proto_depIdxs = nil
}
